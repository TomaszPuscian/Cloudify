{"version":3,"sources":["development_files/Header/Header.js","development_files/MainBox.js","development_files/Footer/Footer.js","development_files/SpotifyApiFetch.js","development_files/weather/WeatherForSpotify.js","development_files/weather/WeatherApiFetch.js","development_files/UserLocalization.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","MainBox","props","children","Footer","SpotifyApiFetch","weather","useState","token","setToken","someList","useEffect","fetch","method","headers","Authorization","btoa","then","response","json","data","access_token","Provider","value","id","playlist","tracks","items","map","item","track","WeatherForSpotify","featuresFilterd","weatherObj","instant","details","air_temperature","cloud_area_fraction","features","audio_features","filter","energy","key","console","log","WeatherApiFetch","latitude","longtitude","setWeatherObj","properties","currDate","Date","setHours","getHours","currTime","getTime","weatherObjectReady","timeseries","find","time","UserLocalization","setLatitude","setLongtitude","success","position","userLatitude","coords","userLongtitude","longitude","error","alert","navigator","geolocation","getCurrentPosition","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.23d8e100.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nconst Header = () => {\n    return (\n        <div className=\"header--container\">\n            <h1>CLOUDIFY</h1>\n        </div>\n    )\n}\n\nexport {Header}","import React from \"react\";\n\n\nconst MainBox = (props) => {\n    return (\n        <>\n            {props.children}\n        </>\n    )\n}\n\nexport {MainBox}","import React from \"react\";\n\nconst Footer = () => {\n    return (\n        <div>Footer</div>\n    )\n}\n\nexport {Footer}","import React, {useEffect, useState} from \"react\";\nimport {Playlist, SpotifyApiContext, TrackFeatures} from \"react-spotify-api\";\nimport {exampleList} from \"./List\";\n\nconst SpotifyApiFetch = ({weather}) => {\n    const [token, setToken] = useState('');\n    const someList = []\n\n    useEffect(() => {\n\n        fetch(\"https://accounts.spotify.com/api/token?grant_type=client_credentials\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Basic \" + btoa(\"016e9c15a9094590acbf82803e2d4725:576c77f27dd24fb4ab3946517ec28c25\"),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                setToken(data.access_token);\n            });\n    }, []);\n\n    if (!token) {\n        return null\n    }\n    return (\n        <>\n            <SpotifyApiContext.Provider value={token}>\n                <Playlist id=\"37i9dQZEVXbN6itCcaL3Tt\">\n                    {(playlist) => (\n                        playlist.data ? <><TrackFeatures id={playlist.data.tracks.items.map(item => item.track.id)}>\n                            {weather}\n                        </TrackFeatures> </>: null\n                    )}\n                </Playlist>\n            </SpotifyApiContext.Provider>\n            <div>{someList}</div>\n        </>\n    )\n}\n// <ul>{playlist.data.tracks.items.map(item => <li key={item.track.id}>{item.track.name}</li> )}</ul> : null\n//<div>{console.log(playlist.data.tracks.items.track.id)}</div>\nexport {SpotifyApiFetch}","import React, {useState} from \"react\";\nimport {SpotifyApiFetch} from \"../SpotifyApiFetch\";\n\n\nconst WeatherForSpotify = ({weatherObj}) => {\n    let featuresFilterd;\n    const weather = weatherObj.data.instant.details.air_temperature > 15 && weatherObj.data.instant.details.cloud_area_fraction < 37 && weatherObj.data.instant.details.cloud_area_fraction < 10\n    if (weather) {\n        featuresFilterd = ((features) => features.data ? <ul>{features.data.audio_features.filter(({energy}) => energy > 0.7).map(({energy, id}) => <li key={id}>{energy}</li> )}</ul> : null)\n    } else {\n        featuresFilterd = ((features) => features.data ? <ul>{features.data.audio_features.filter(({energy}) => energy < 0.7).map(({energy, id}) => <li key={id}>{energy}</li> )}</ul> : null)\n    }\n    return (\n        <>\n            <h1>{console.log(weatherObj)}</h1>\n            <SpotifyApiFetch weather={featuresFilterd} />\n        </>\n        )\n}\n\nexport {WeatherForSpotify}\n\n\n\n\n","import React, {useEffect, useState} from \"react\";\nimport {WeatherForSpotify} from \"./WeatherForSpotify\";\n\n//air_pressure_at_sea_level, air_temperature, cloud_area_fraction, relative humidity, wind from direction, wind speed\n\nconst WeatherApiFetch = ({latitude, longtitude}) => {\n    const [weatherObj, setWeatherObj] = useState('');\n\n    // const latitudeHard = 52.229675\n    // const longtitudeHard = 21.012230\n\n    useEffect(() => {\n        fetch(`https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=${latitude}&lon=${longtitude}`)\n            .then(response => response.json())\n            .then(data => setWeatherObj(data.properties))\n    }, [])\n\n    if (!weatherObj) {\n        return null\n    } else {\n        const currDate = new Date();\n        currDate.setHours(currDate.getHours() - 1);\n        const currTime = currDate.getTime();\n        const weatherObjectReady = weatherObj.timeseries.find((item) => {\n            return new Date(item.time).getTime() > currTime;\n        })\n        return (\n            <>\n                <WeatherForSpotify weatherObj={weatherObjectReady}/>\n            </>\n    )}\n}\n\n\nexport {WeatherApiFetch}\n\n","import React, {useEffect, useState} from \"react\";\nimport {WeatherApiFetch} from \"./weather/WeatherApiFetch\";\n\nconst UserLocalization = () => {\n    const [latitude, setLatitude] = useState('');\n    const [longtitude, setLongtitude] = useState('');\n\n    const success = (position) => {\n        const userLatitude = position.coords.latitude;\n        const userLongtitude = position.coords.longitude;\n\n        setLatitude(userLatitude);\n        setLongtitude(userLongtitude)\n    }\n\n    const error = () => {\n        alert('Cloudify have failed to obtain your location. Let Cloudify get your position or write it in the search field below');\n    }\n    useEffect(()=> {\n        navigator.geolocation.getCurrentPosition(success, error)\n    },[])\n\n    if (!latitude || !longtitude) {\n        return null\n    } else {\n        console.log(latitude, longtitude);\n        return (\n            <WeatherApiFetch latitude={latitude} longtitude={longtitude}/>\n        )\n    }\n}\n\nexport {UserLocalization}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./development_files/Header/Header\";\nimport {MainBox} from \"./development_files/MainBox\";\nimport {Footer} from \"./development_files/Footer/Footer\";\nimport {SearchBox} from \"./development_files/SearchBox\";\nimport {UserLocalization} from \"./development_files/UserLocalization\";\nimport {WeatherApiFetch} from \"./development_files/weather/WeatherApiFetch\";\n\n\n\n\nfunction App() {\n  return (\n      <>\n          <Header />\n          <MainBox>\n              <UserLocalization />\n              {/*<WeatherApiFetch />*/}\n          </MainBox>\n          <Footer />\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
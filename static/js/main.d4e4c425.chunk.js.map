{"version":3,"sources":["development_files/Header/Header.js","development_files/MainBox.js","development_files/Footer/Footer.js","development_files/WeatherTracks.js","development_files/SpotifyApiFetch.js","development_files/weather/WeatherForSpotify.js","development_files/weather/WeatherDisplay.js","development_files/weather/WeatherApiFetch.js","development_files/UserLocalization.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","Button","variant","MainBox","props","children","Footer","WeatherTracks","playlist","features","sunnyWeather","console","log","data","audio_features","filter","energy","danceability","valence","map","feature","track","tracks","items","find","item","ListGroup","as","Item","key","album","artists","name","join","SpotifyApiFetch","useState","token","setToken","useEffect","fetch","method","headers","Authorization","btoa","then","response","json","access_token","Provider","value","WeatherForSpotify","weatherObj","instant","details","air_temperature","cloud_area_fraction","next_1_hours","precipitation_amount","WeatherDisplay","WeatherApiFetch","latitude","longtitude","setWeatherObj","properties","currDate","Date","setHours","getHours","currTime","getTime","weatherObjectReady","timeseries","time","UserLocalization","setLatitude","setLongtitude","success","position","userLatitude","coords","userLongtitude","longitude","error","alert","navigator","geolocation","getCurrentPosition","maximumAge","enableHighAccuracy","timeout","frequency","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d4e4c425.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nimport Button from 'react-bootstrap/Button';\nimport \"../../images/1399995805.svg\"\n\nconst Header = () => {\n    return (\n        <>\n            <header>\n                <span className=\"img--header\"/>\n                <div className=\"header--container\">\n                    <h1 className=\"logo\">CLOUDIFY</h1>\n                    <h3 id=\"sub-logo\">Find best music for your current weather</h3>\n                </div>\n                <Button variant=\"success\" className=\"connect-user--button\">Connect with your account</Button>\n            </header>\n        </>\n    )\n}\n\nexport {Header}","import React from \"react\";\n\n\nconst MainBox = (props) => {\n    return (\n        <>\n            {props.children}\n        </>\n    )\n}\n\nexport {MainBox}","import React from \"react\";\nimport \"./Footer.css\"\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"footer--container\">\n                <p className=\"footer--paragraph\">Copyright by TomaszPuscian</p>\n                <p className=\"footer--paragraph\" id=\"ndg\">NDG</p>\n            </div>\n        </footer>\n    )\n}\n\nexport {Footer}","import React from 'react';\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\n\nconst WeatherTracks = ({playlist, features, sunnyWeather}) => {\n    console.log(\"vars\", sunnyWeather);\n    if (!features.data || !playlist.data) {\n        return null;\n    }\n    let allowedFeatures = [];\n\n    if (sunnyWeather) {\n        allowedFeatures = features.data.audio_features\n            .filter(({energy, danceability, valence}) => energy > 0.7 && danceability > 0.7 && valence > 0.5);\n    } else {\n        allowedFeatures = features.data.audio_features\n            .filter(({energy, danceability, valence}) => energy < 0.7 && danceability < 0.7 && valence < 0.5);\n    }\n\n    allowedFeatures = allowedFeatures.map(feature => {\n        const track = playlist.data.tracks.items.find(item => {\n            return  item.track.id === feature.id;\n        })\n        return {\n            ...feature,\n            track\n        };\n    })\n\n    return (\n        allowedFeatures.map(item => {\n            return <ListGroup variant=\"secondary flush\" as=\"ul\">\n                    <ListGroup.Item key={item.id} as=\"li\">{item.track.track.album.artists.map(item => item.name).join(\", \")} - {item.track.track.name}</ListGroup.Item>\n                </ListGroup>}\n            )\n    )\n}\n\nexport { WeatherTracks }\n\n\n//<li key={item.id}>{item.track.track.album.artists.map(item => item.name).join(\", \")} - {item.track.track.name}</li>)}","import React, {useEffect, useState} from \"react\";\nimport {Playlist, SpotifyApiContext, TrackFeatures} from \"react-spotify-api\";\nimport {exampleList} from \"./List\";\nimport {WeatherTracks} from \"./WeatherTracks\";\n\nconst SpotifyApiFetch = ({sunnyWeather}) => {\n    const [token, setToken] = useState('');\n\n    useEffect(() => {\n\n        fetch(\"https://accounts.spotify.com/api/token?grant_type=client_credentials\", {\n            method: \"POST\",\n            headers: {\n                Authorization: \"Basic \" + btoa(\"016e9c15a9094590acbf82803e2d4725:576c77f27dd24fb4ab3946517ec28c25\"),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                setToken(data.access_token);\n            });\n    }, []);\n\n    if (!token) {\n        return null\n    }\n    return (\n        <>\n            <SpotifyApiContext.Provider value={token}>\n                <Playlist id=\"37i9dQZF1DX6gb9mP6Vy34\">\n                    {(playlist) => (\n                        playlist.data ? <><TrackFeatures id={playlist.data.tracks.items.map(item => item.track.id)}>\n\n                            {(features) => {\n                               return (<WeatherTracks\n                                   playlist={playlist}\n                                   features={features}\n                                   sunnyWeather={sunnyWeather}\n                               />)\n                            }}\n                        </TrackFeatures> </>: null\n                    )}\n                </Playlist>\n            </SpotifyApiContext.Provider>\n\n        </>\n    )\n}\n// <ul>{playlist.data.tracks.items.map(item => <li key={item.track.id}>{item.track.name}</li> )}</ul> : null\n//<div>{console.log(playlist.data.tracks.items.track.id)}</div>\nexport {SpotifyApiFetch}","import React from \"react\";\nimport {SpotifyApiFetch} from \"../SpotifyApiFetch\";\n\n\nconst WeatherForSpotify = ({weatherObj}) => {\n    console.log(\"bbbb\", weatherObj)\n\n    const sunnyWeather = weatherObj.data.instant.details.air_temperature > 15 &&\n        weatherObj.data.instant.details.cloud_area_fraction < 80 &&\n        weatherObj.data.next_1_hours.details.precipitation_amount <= 0.05\n\n    return (\n        <>\n            <SpotifyApiFetch sunnyWeather={sunnyWeather} />\n        </>\n        )\n}\n\nexport {WeatherForSpotify}\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const rainyWeather = weatherObj.data.instant.details.cloud_area_fraction > 80 && weatherObj.data.next_1_hours.details.precipitation_amount > 7.5\n\n// const cloudyWeather = weatherObj.data.instant.details.air_temperature < 20 && weatherObj.data.instant.details.cloud_area_fraction > 90 && weatherObj.data.next_1_hours.details.precipitation_amount < 7.5\n\n// if (sunnyWeather) {\n//     featuresFilterd = (features) => features.data ? features.data.audio_features\n//         .filter(({energy, danceability, tempo, valence}) => energy > 0.7 && danceability > 0.65 && tempo > 125 && valence > 0.7) : null\n// }\n// if (rainyWeather){\n//     featuresFilterd = (features) => features.data ? features.data.audio_features\n//         .filter(({energy, danceability, tempo, valence}) => energy < 0.45 && danceability < 0.5 && tempo < 120 && valence < 0.2) : null\n// }\n// if (cloudyWeather) {\n//     featuresFilterd = (features) => features.data ? features.data.audio_features\n//         .filter(({energy, danceability, tempo, valence}) => (energy < 0.7 && energy > 0.45) && (danceability < 0.6 && danceability >= 0.5) && (tempo > 120 && tempo < 140) && (valence > 0.2 && valence < 0.5)) : null\n// }\n//&& weatherObj.data.instant.details.cloud_area_fraction < 80 && weatherObj.data.next_1_hours.details.precipitation_amount < 5\n//(weatherObj.data.instant.details.air_temperature > 5 && weatherObj.data.instant.details.air_temperature < 18) &&\n//","import React from \"react\";\nimport \"./WeatherDisplay.css\"\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst WeatherDisplay = ({weatherObj}) => {\n    return (\n        <div className=\"list-group\">\n            <ListGroup>\n                <ListGroup.Item>\n                    Temperatura: {weatherObj.data.instant.details.air_temperature} st. C\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    Opady: {weatherObj.data.next_1_hours.details.precipitation_amount} mm\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    Zachmurzenie: {weatherObj.data.instant.details.cloud_area_fraction} %\n                </ListGroup.Item>\n            </ListGroup>\n        </div>\n    )\n}\n\nexport {WeatherDisplay}","import React, {useEffect, useState} from \"react\";\nimport {WeatherForSpotify} from \"./WeatherForSpotify\";\nimport {WeatherDisplay} from \"./WeatherDisplay\";\nimport \"./WeatherApiFetch.css\"\n\n\nconst WeatherApiFetch = ({latitude, longtitude}) => {\n    const [weatherObj, setWeatherObj] = useState('');\n\n\n    useEffect(() => {\n        fetch(`https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=${latitude}&lon=${longtitude}`)\n            .then(response => response.json())\n            .then(data => setWeatherObj(data.properties))\n    }, [])\n\n    if (!weatherObj) {\n        return <div className=\"loading-screen\">\n            LOADING\n        </div>\n    } else {\n        const currDate = new Date();\n        currDate.setHours(currDate.getHours() - 1);\n        const currTime = currDate.getTime();\n        const weatherObjectReady = weatherObj.timeseries.find((item) => {\n            return new Date(item.time).getTime() > currTime;\n        })\n        return (\n            <>\n                <WeatherDisplay weatherObj={weatherObjectReady}/>\n                <div className=\"playlist\">Playlist for you:</div>\n                <WeatherForSpotify weatherObj={weatherObjectReady}/>\n\n            </>\n    )}\n}\n\n\nexport {WeatherApiFetch}\n\n","import React, {useEffect, useState} from \"react\";\nimport {WeatherApiFetch} from \"./weather/WeatherApiFetch\";\n\nconst UserLocalization = () => {\n    const [latitude, setLatitude] = useState('');\n    const [longtitude, setLongtitude] = useState('');\n\n    const success = (position) => {\n        const userLatitude = position.coords.latitude;\n        const userLongtitude = position.coords.longitude;\n\n        setLatitude(userLatitude);\n        setLongtitude(userLongtitude)\n    }\n\n    const error = () => {\n        alert('Cloudify have failed to obtain your location. Let Cloudify get your position or write it in the search field below');\n    }\n    useEffect(()=> {\n        navigator.geolocation.getCurrentPosition(success, error, {\n            maximumAge: 0,\n            enableHighAccuracy: true,\n            timeout: 5000,\n            frequency:5000\n        })\n    },[])\n\n    if (!latitude || !longtitude) {\n        return null\n    } else {\n        console.log(latitude, longtitude);\n        return (\n            <WeatherApiFetch latitude={latitude} longtitude={longtitude}/>\n        )\n    }\n}\n\nexport {UserLocalization}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./development_files/Header/Header\";\nimport {MainBox} from \"./development_files/MainBox\";\nimport {Footer} from \"./development_files/Footer/Footer\";\nimport {UserLocalization} from \"./development_files/UserLocalization\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\n\n\nfunction App() {\n  return (\n      <>\n          <Header />\n          <MainBox>\n              <UserLocalization />\n          </MainBox>\n          <Footer />\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}